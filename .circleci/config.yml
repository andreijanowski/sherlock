version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.13
  aws-code-deploy: circleci/aws-code-deploy@0.0.7
  aws-ecr: circleci/aws-ecr@6.3.0

references:
  deploy: &deploy
    working_directory: ~/repo
    docker:
      - image: circleci/ruby:2.4.3

  node_machine: &node_machine
    working_directory: ~/repo
    docker:
      - image: circleci/node:10

jobs:
  checkout_code:
    <<: *node_machine
    steps:
      - checkout
      - persist_to_workspace:
          root: ~/repo
          paths:
            - .

  yarn_lint:
    <<: *node_machine
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: ~/repo
      - restore_cache:
          keys:
            - yarn-{{ checksum "yarn.lock" }}
            - yarn -
      - run: curl -o- -L https://yarnpkg.com/install.sh | bash
      - run: yarn install
      - save_cache:
          key: yarn-{{ checksum "yarn.lock" }}
          paths:
            - ~/repo/node_modules
      - run:
          name: Run JS linter
          command: yarn lint:js
      - run:
          name: Run CSS Linter
          command: yarn lint:css

  build_image:
    <<: *node_machine
    steps:
      - run:
          name: 'set ENV for deploying staging'
          command: |
            echo 'export AWS_ACCESS_KEY_ID=$STAGING_AWS_ACCESS_KEY_ID' >> $BASH_ENV;
            echo 'export AWS_SECRET_ACCESS_KEY=$STAGING_AWS_SECRET_ACCESS_KEY' >> $BASH_ENV;
            source $BASH_ENV
      - aws-ecr/build-and-push-image:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: STAGING_AWS_DEFAULT_REGION
          account-url: STAGING_AWS_ECR_ACCOUNT_URL
          repo: calluna-ecr-sherlock-staging
          tag: ${CIRCLE_SHA1}
          dockerfile: docker/Dockerfile
          setup-remote-docker: true

  deploy_staging:
    working_directory: ~/repo
    executor: aws-cli/default
    steps:
      - run:
          name: 'set ENV for deploying staging'
          command: |
            echo 'export AWS_ACCESS_KEY_ID=$STAGING_AWS_ACCESS_KEY_ID' >> $BASH_ENV;
            echo 'export AWS_SECRET_ACCESS_KEY=$STAGING_AWS_SECRET_ACCESS_KEY' >> $BASH_ENV;
            source $BASH_ENV
      - checkout
      - run:
          name: Configure deployment
          command: |
            echo IMAGE=${STAGING_AWS_ECR_ACCOUNT_URL}/calluna-ecr-sherlock-staging:${CIRCLE_SHA1} >> codedeploy/parameters
      - aws-cli/install
      - aws-cli/configure
      - aws-code-deploy/push-bundle:
          application-name: calluna-sherlock-staging-main_app
          bundle-bucket: calluna-bucket-sherlock-staging
          bundle-key: codedeploy/$CIRCLE_PROJECT_REPONAME-$CIRCLE_BUILD_NUM
      - aws-code-deploy/deploy-bundle:
          application-name: calluna-sherlock-staging-main_app
          deployment-group: calluna-sherlock-staging-main_app-group
          bundle-bucket: calluna-bucket-sherlock-staging
          bundle-key: codedeploy/$CIRCLE_PROJECT_REPONAME-$CIRCLE_BUILD_NUM

  deploy_dynamic_staging:
    working_directory: ~/repo
    executor: aws-cli/default
    steps:
      - run:
          name: 'set ENV for deploying staging'
          command: |
            echo 'export AWS_ACCESS_KEY_ID=$STAGING_AWS_ACCESS_KEY_ID' >> $BASH_ENV;
            echo 'export AWS_SECRET_ACCESS_KEY=$STAGING_AWS_SECRET_ACCESS_KEY' >> $BASH_ENV;
            source $BASH_ENV
      - checkout
      - run:
          name: Configure deployment
          command: |
            echo VIRTUAL_HOST=$(echo ${CIRCLE_BRANCH} | cut -d '/' -f 2- | sed 's/[^ a-zA-Z0-9]/-/g' | cut -d '-' -f -3).sherlock.calluna.devguru.co >> codedeploy/parameters
            echo IMAGE=${STAGING_AWS_ECR_ACCOUNT_URL}/calluna-ecr-sherlock-staging:${CIRCLE_SHA1} >> codedeploy/parameters
      - aws-cli/install
      - aws-cli/configure
      - aws-code-deploy/push-bundle:
          application-name: calluna-sherlock-staging-dynamic_main_app
          bundle-bucket: calluna-bucket-sherlock-staging
          bundle-key: codedeploy/$CIRCLE_PROJECT_REPONAME-$CIRCLE_BUILD_NUM
      - aws-code-deploy/deploy-bundle:
          application-name: calluna-sherlock-staging-dynamic_main_app
          deployment-group: calluna-sherlock-staging-dynamic_main_app-group
          bundle-bucket: calluna-bucket-sherlock-staging
          bundle-key: codedeploy/$CIRCLE_PROJECT_REPONAME-$CIRCLE_BUILD_NUM

  mark_integration_as_deployed:
    docker:
      - image: quay.io/netguru/deployer
    steps:
      - run:
          name: Mark Dynamic as Deployed
          command: |
            export VIRTUAL_HOST=$(echo ${CIRCLE_BRANCH} | cut -d '/' -f 2- | sed 's/[^ a-zA-Z0-9]/-/g' | cut -d '-' -f -3).sherlock.calluna.devguru.co
            ruby /deployment.rb ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} ${CIRCLE_SHA1} ${CIRCLE_PULL_REQUEST##*/} https://${VIRTUAL_HOST}/

  build_push_docker:
    docker:
      - image: circleci/python:2.7-jessie
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: ~/repo
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install AWSCLI
          command: sudo pip install awscli
      - run:
          name: Log into ECR
          command: $(aws ecr get-login --no-include-email --region eu-central-1)
      - run:
          name: Build docker image
          command: docker build --build-arg OAUTH_CALLBACK_URL --build-arg APP_URL --build-arg OAUTH_PUBLIC_CLIENT_ID --build-arg PUBLIC_FOODETECTIVE_URL --build-arg OAUTH_SECRET_CLIENT_ID --build-arg PUBLIC_API_URL --build-arg PUBLIC_GOOGLE_MAPS_API_KEY --build-arg PUBLIC_PUSHER_APP_CLUSTER --build-arg PUBLIC_PUSHER_APP_KEY --build-arg STRIPE_CLIENT_ID --build-arg PUBLIC_STRIPE_API_KEY --build-arg PUBLIC_GOOGLE_TAG_MANAGER_ID --build-arg PUBLIC_FACEBOOK_PIXEL_ID --build-arg PUBLIC_GOOGLE_ANALYTICS_ID --build-arg PUBLIC_FOODETECTIVE_URL -t ${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}-${CIRCLE_SHA1} -f docker/Dockerfile.production .
      - run:
          name: Push image to AWS ECR
          command: |
            docker tag ${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}-${CIRCLE_SHA1} ${AWS_ECR_REPO_URL}:latest
            docker tag ${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}-${CIRCLE_SHA1} ${AWS_ECR_REPO_URL}:${CIRCLE_SHA1}
            docker push ${AWS_ECR_REPO_URL}:latest
            docker push ${AWS_ECR_REPO_URL}:${CIRCLE_SHA1}

  deploy_production_front:
    <<: *deploy
    working_directory: ~/repo/deployment
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: bundle config
          command: bundle config --local path ~/repo/deployment/vendor/bundle
      - run:
          name: Install AWSCLI
          command: |
            sudo apt install -qq -y python python-pip python-dev
            sudo pip install awscli
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Deploy to production
          command: |
            $(aws ecr get-login --no-include-email --region eu-central-1)
            bundle install; bundle exec cap production deploy

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - checkout_code
      - build_image:
          filters:
            branches:
              ignore: production
      - deploy_staging:
          requires:
            - build_image
          filters:
            branches:
              only: master
      - deploy_dynamic_staging:
          requires:
            - build_image
          filters:
            branches:
              ignore:
                - master
                - production
      - mark_integration_as_deployed:
          requires:
            - deploy_dynamic_staging
          filters:
            branches:
              ignore:
                - master
                - production
      - build_push_docker:
          requires:
            - checkout_code
          filters:
            branches:
              only:
                - production
                - production-setup
      - deploy_production_front:
          requires:
            - checkout_code
            - build_push_docker
          filters:
            branches:
              only:
                - production
                - production-setup
